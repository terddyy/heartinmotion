@use 'variables' as *;

// Media Query Mixins
@mixin breakpoint($size) {
  @if map-has-key($breakpoints, $size) {
    @media (min-width: map-get($breakpoints, $size)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$size}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// Flexbox Mixins
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Grid Mixins
@mixin grid($columns: 1, $gap: $spacing-md) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Typography Mixins
@mixin heading($size: $font-size-2xl, $weight: $font-weight-bold, $family: $font-family-heading) {
  font-size: $size;
  font-weight: $weight;
  font-family: $family;
  line-height: 1.2;
}

// Animation Mixins
@mixin transition($property: all, $duration: 0.3s, $timing: ease-in-out) {
  transition: $property $duration $timing;
}

@mixin hover-effect {
  @include transition;
  &:hover {
    @content;
  }
}

// Position Mixins
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin fixed-center {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Button Mixins
@mixin button-base {
  display: inline-block;
  padding: $spacing-sm $spacing-md;
  border: none;
  border-radius: $border-radius-sm;
  cursor: pointer;
  font-weight: $font-weight-medium;
  text-align: center;
  text-decoration: none;
  @include transition;
}

@mixin button-variant($bg-color, $text-color: $color-white) {
  @include button-base;
  background-color: $bg-color;
  color: $text-color;

  &:hover {
    background-color: darken($bg-color, 10%);
  }
}

// Shadow Mixins
@mixin box-shadow($level: 'md') {
  @if $level == 'sm' {
    box-shadow: $shadow-sm;
  } @else if $level == 'md' {
    box-shadow: $shadow-md;
  } @else if $level == 'lg' {
    box-shadow: $shadow-lg;
  }
}

// Container Mixins
@mixin container($max-width: 1200px, $padding: $spacing-md) {
  width: 100%;
  max-width: $max-width;
  margin-right: auto;
  margin-left: auto;
  padding-right: $padding;
  padding-left: $padding;
}

// Text Truncation
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Responsive Image
@mixin responsive-image {
  max-width: 100%;
  height: auto;
  display: block;
} 